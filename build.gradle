plugins { 
	id 'java'
	id 'eclipse'
	id 'jaci.openrio.gradle.GradleRIO' version '2017.1.5'
	id "org.hidetake.ssh" version "2.9.0"
}

repositories {
    mavenCentral()
	maven {
	  url "https://plugins.gradle.org/m2/"
	}
}

frc {
    team = "4215"
    robotClass = 'org.usfirst.frc.team4215.robot.Robot'

    //deploy = false                      // Note, this disables deployment for this project
    //deployTimeout = 2
    deployDirectory = "/home/lvuser/frc"
    rioIP = "10.42.15.2"
    rioHost = "roboRIO-4215-FRC.local"

    // robotCommand overrides runArguments, jvmArguments and useDebugCommand.
    // Setting robotCommand to null will not deploy a robotCommand, useful for multiproject builds
    // Setting robotCommand to an empty string ('') will make GradleRIO autogenerate it (this is the default)
    //robotCommand = "./something_else"
    //runArguments = "--hello"            // Arguments to launch the Java Program with
    //jvmArguments = "-Xmx90m"            // Arguments to send to the JVM
    //useDebugCommand = true              // Set to true to make the program wait for a remote debugger before starting
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
}

dependencies {
	compile wpilib()
	compile talonSrx()
}

def robotManifest = {
  attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Robot-Class': frc.robotClass
  attributes 'Class-Path': from configurations.compile.collect { it.getName() }.join(' ')
}

jar {
	from configurations.compile.collect {  it.isDirectory() ? it : zipTree(it) }
    manifest {
	  attributes (
		  'Main-Class': 'edu.wpi.first.wpilibj.RobotBase',
		  'Robot-Class': frc.robotClass,
		  'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
	  )
    }
}

task wrapper(type: Wrapper) { 
	gradleVersion = '4.0.1'
}
